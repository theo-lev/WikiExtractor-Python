,exit block(break),continue,label,branch (goto),return value from generator
Ada[1],exit «loop_name» «when condition»,N/A,label:,goto label,N/A
ALGOL 68,value exit; ...,do statements; skip exit; label: statements od,label: ...,go to label; ... goto label; ... label; ...,"yield(value)
(Callback)[13]"
APL,:Leave,:Continue,label:,→label or :GoTo label,N/A
C (C99),break;,continue;,label:,goto label;,N/A
Objective-C,break;,continue;,label:,goto label;,N/A
C++ (STL),break;,continue;,label:,goto label;,N/A
D,break;,continue;,label:,goto label;,N/A
C#,break;,continue;,label:,goto label;,yield return value;
Java,break «label»;,continue «label»;,label:,N/A,
JavaScript,break «label»;,continue «label»;,label:,N/A,yield value«;»
PHP,break «levels»;,continue «levels»;,label:,goto label;,yield «key =>» value;
Perl,last «label»;,next «label»;,label:,goto label;,
Raku,last «label»;,next «label»;,label:,goto label;,
Go,break «label»,continue «label»,label:,goto label,
Swift,break «label»,continue «label»,label:,N/A,
Bash shell,break «levels»,continue «levels»,N/A,N/A,N/A
Common Lisp,(return) or  (return-from block) or  (loop-finish),,(tagbody tag...tag...),(go tag),
Scheme,,,,,
ISLISP,(return-from block),,(tagbody tag...tag...),(go tag),
Pascal(ISO),N/A,N/A,label:[a],goto label;,N/A
Pascal(FPC),break;,continue;,label:[a],goto label;,N/A
Visual Basic,"Exit blockAlternatively, for methods,
Return",N/A,label:,GoTo label,N/A
Xojo,"Exit blockAlternatively, for methods,
Return",Continue block,label:,GoTo label,N/A
Visual Basic .NET,"Exit blockAlternatively, for methods,
Return",Continue block,label:,GoTo label,Yield value
Python,break,continue,N/A,N/A,yield value
RPG IV,LEAVE;,ITER;,,,
S-Lang,break;,continue;,,,
Fortran,EXIT,CYCLE,label[b],GOTO label,N/A
Ruby,break,next,,,
Windows PowerShell,break «label»,continue,,,
OCaml,N/A,N/A,N/A,N/A,
F#,N/A,N/A,N/A,N/A,
Standard ML,N/A,N/A,N/A,N/A,
Haskell (GHC),N/A,N/A,N/A,N/A,
COBOL,EXIT PERFORM or EXIT PARAGRAPH or EXIT SECTION or EXIT.,EXIT PERFORM CYCLE,label «SECTION».,GO TO label,N/A
Ya,"break «from where»; f.e. 
break for switch;","continue «to where»; f.e. 
continue for switch;",:label,goto :label;,N/A
