,if,else if,select case,conditional expression
Ada[1],if condition then statements «else statements» end if,if condition1 then statements elsif condition2 then statements... «else statements» end if,case expression iswhen value_list1 => statementswhen value_list2 => statements...«when others => statements» end case,(if condition1 then expression1 «elsif condition2 then expression2» ...  else expressionn) (case expression is when value_list1 => expression1when value_list2 => expression2 ...  «when others => expressionn» )
Seed7,if condition then statements «else statements» end if,if condition1 then statements elsif condition2 then statements... «else statements» end if,case expression of when set1 : statements ... «otherwise: statements» end case,
Modula-2,if condition then statements «else statements» end,if condition1 then statements elsif condition2 then statements... «else statements» end,case expression of caseLabelList : statements | ... «else statements» end,
ALGOL 68,if condition then  statements «else statements» fi,if condition then statements elif condition then statements fi,"case switch in statements, statements«,... out statements» esac",( condition | valueIfTrue | valueIfFalse )
ALGOL 68  (brief form),( condition | statements «| statements» ),( condition | statements |: condition |  statements ),"( variable | statements,... «| statements» )",
APL,:If condition instructions «:Else instructions»:EndIf,:If condition instructions :ElseIf condition instructions ... «:Else instructions» :EndIf,:Select expression  :Case case1  instructions ...  «:Elseinstructions»:EndSelect,{condition:valueIfTrue ⋄ valueIfFalse}
"C (C99) and:
Objective-C
C++ (STL)
D
Java
JavaScript
PHP","if (condition) instructions «else instructions»
instructions can be a single statement or a block in the form of: { statements }","if (condition) instructions else if (condition) instructions ... «else instructions»
if (condition) instructions
else { if (condition) instructions }",switch (variable) {case case1: instructions «break;» ... «default: instructions»},condition ? valueIfTrue : valueIfFalse
C#,"if (condition) instructions «else instructions»
instructions can be a single statement or a block in the form of: { statements }","if (condition) instructions «else instructions»
if (condition) instructions else if (condition) instructions ... «else instructions»","All non-empty cases must end with a break or goto case statement (that is, they are not allowed to fall-through to the next case).
The default case is not required to come last. ","condition ? valueIfTrue : valueIfFalse
switch (variable)
{
case case1:
instructions
«break_or_jump_statement»     ...     «default:
instructions
break_or_jump_statement»
}"
Windows PowerShell,if (condition) instructions «else instructions»,if (condition) { instructions } elseif (condition) { instructions } ... «else { instructions }»,switch (variable) { case1 { instructions «break;» } ... «default { instructions }»},
Go,if condition {instructions} «else {instructions}»,if condition {instructions} else if condition {instructions} ... «else {instructions}»  or  switch {case condition: instructions ... «default: instructions»},switch variable {case case1: instructions ... «default: instructions»},
Swift,if condition {instructions} «else {instructions}»,if condition {instructions} else if condition {instructions} ... «else {instructions}» ,switch variable {case case1: instructions ... «default: instructions»},
Perl,if (condition) {instructions} «else {instructions}» or unless (notcondition) {instructions} «else {instructions}»,if (condition) {instructions} elsif (condition) {instructions} ... «else {instructions}» or unless (notcondition) {instructions} elsif (condition) {instructions} ... «else {instructions}»,"use feature ""switch""; ... given (variable) {when (case1) { instructions } ... «default { instructions }»}",condition ? valueIfTrue : valueIfFalse
Raku,if condition {instructions} «else {instructions}» or unless notcondition {instructions},if condition {instructions} elsif condition {instructions} ... «else {instructions},given variable {when case1 { instructions } ... «default { instructions }»},condition ?? valueIfTrue !! valueIfFalse
Ruby,if condition instructions «else instructions» ,if condition instructions elsif condition instructions ... «else instructions» end,case variable  when case1  instructions ...  «elseinstructions»end,condition ? valueIfTrue : valueIfFalse
Scala,if (condition) {instructions} «else {instructions}»,if (condition) {instructions} else if (condition) {instructions} ... «else {instructions}»,expression match {case pattern1 => expression case pattern2 => expression ... «case _ => expression»}[b],if (condition) valueIfTrue else valueIfFalse
Smalltalk,condition ifTrue: trueBlock «ifFalse: falseBlock» end,,,condition ifTrue: trueBlock ifFalse: falseBlock
Common Lisp,(when condition  instructions) or  (unless condition  instructions) or  (if condition (progn instructions)«(progn instructions)»),(cond (condition1 instructions) (condition2 instructions)...«(t instructions)»),(case expression(case1 instructions)(case2 instructions)...«(otherwise instructions)»),(if test then else) (cond (test1 value1) (test2 value2) ...))
Scheme,(when conditioninstructions) or  (if condition (begin instructions) «(begin instructions)»),(cond (condition1 instructions) (condition2 instructions) ... «(else instructions)»),(case (variable) ((case1) instructions) ((case2) instructions) ... «(else instructions)»),(if condition valueIfTrue valueIfFalse)
ISLISP,(if condition (progn instructions)«(progn instructions)»),(cond (condition1 instructions) (condition2 instructions)...«(t instructions)»),(case expression(case1 instructions)(case2 instructions)...«(t instructions)»),(if condition valueIfTrue valueIfFalse)
Pascal,if condition then begin instructions end  «else begininstructionsend»[c],if condition then begin instructions end  else if condition then begininstructions end ... «else begininstructions end»[c],case variable of case1: instructions  ...  «else: instructions»end[c]
Visual Basic,"If condition Then instructions «Else instructions»End If
 
Single-line:
If we let instructions be:
statement : statement : ...
If condition Then instructions« Else instructions»","If condition Theninstructions ElseIf condition Theninstructions ...  «Else instructions»End If
 
Single-line:
See note about C-like languages; the Else clause of a single-line If statement can contain another single-line If statement.",Select« Case» variableCase case_pattern1instructions...«Case Elseinstructions»End Select,"IIf(condition, valueIfTrue, valueIfFalse)"
Visual Basic .NET,"If condition Then instructions «Else instructions»End If
 
Single-line:
If we let instructions be:
statement : statement : ...
If condition Then instructions« Else instructions»","If condition Theninstructions ElseIf condition Theninstructions ...  «Else instructions»End If
 
Single-line:
See note about C-like languages; the Else clause of a single-line If statement can contain another single-line If statement.",Select« Case» variableCase case_pattern1instructions...«Case Elseinstructions»End Select,"If(condition, valueIfTrue, valueIfFalse)"
Xojo,"If condition Then instructions «Else instructions»End If
 
Single-line:
If we let instructions be:
statement : statement : ...
If condition Then instructions« Else instructions»","If condition Theninstructions ElseIf condition Theninstructions ...  «Else instructions»End If
 
Single-line:
See note about C-like languages; the Else clause of a single-line If statement can contain another single-line If statement.",Select« Case» variableCase case_pattern1instructions...«Case Elseinstructions»End Select,"If(condition, valueIfTrue, valueIfFalse)"
Python [a],if condition :  Tab ↹ instructions  «else:  Tab ↹ instructions»,if condition :  Tab ↹ instructions  elif condition :  Tab ↹ instructions   ...  «else:  Tab ↹ instructions»,,valueIfTrue if condition else valueIfFalse (Python 2.5+)
S-Lang,if (condition) { instructions } «else { instructions }»,if (condition) { instructions } else if (condition) { instructions } ... «else { instructions }»,switch (variable) { case case1: instructions } { case case2: instructions } ...,
Fortran,IF (condition) THEN  instructions  ELSE  instructions  ENDIF,IF (condition) THEN  instructions  ELSEIF (condition) THEN  instructions  ...  ELSE  instructions  ENDIF,SELECT CASE(variable) CASE (case1)  instructions  ...  CASE DEFAULT  instructions   END SELECT,
Forth,condition IF instructions « ELSE instructions» THEN,condition IF instructions  ELSE condition IF instructions THEN THEN,value CASE case OF instructions ENDOF case OF instructions ENDOF      default instructions ENDCASE,condition IF valueIfTrue ELSE valueIfFalse THEN
OCaml,if condition then begin instructions end «else begin instructions end»,if condition then begin instructions end else if condition then begin instructions end ... «else begin instructions end»,match value with pattern1  -> expression | pattern2 -> expression  ... «| _ -> expression»[b],if condition then valueIfTrue else valueIfFalse
F#,"Lightweight syntax mode:
Either on a single line or with indentation as shown below:
 
if condition then Tab ↹ instructions  «else Tab ↹ instructions»
 
Verbose syntax mode:
Same as Standard ML (below).","Lightweight syntax mode:
Either on a single line or with indentation as shown below:
 
if condition then Tab ↹ instructions  elif condition then Tab ↹ instructions  ...  «else Tab ↹ instructions»
 
Verbose syntax mode:
Same as Standard ML (below).",match value with pattern1  -> expression | pattern2 -> expression  ... «| _ -> expression»[b],if condition then valueIfTrue else valueIfFalse
Standard ML,if condition then «(»instructions «)» else «(» instructions «)»,if condition then «(»instructions «)» else if condition then «(» instructions «)» ... else «(» instructions «)»,case value ofpattern1 => expression  | pattern2 => expression  ...  «| _ => expression»[b],if condition then valueIfTrue else valueIfFalse
Haskell (GHC),if condition then expression else expression or when condition (do instructions) or unless notcondition (do instructions),result | condition = expression | condition = expression | otherwise = expression,case value of {pattern1  -> expression; pattern2 ->expression;  ... «_ -> expression»}[b],if condition then valueIfTrue else valueIfFalse
Bash shell,"
if condition-command; then 
    expression 
«else 
    expression» 
fi","
if condition-command; then 
    expression 
elif condition-command; then 
    expression 
«else 
    expression» 
fi","
case ""$variable"" in 
""$condition1"" ) 
    command... 
""$condition2"" ) 
    command... 
esac",
CoffeeScript,if condition then expression «else expression»,if condition then expression else if condition then expression «else expression»,switch expression when condition then expression else expression,All conditions are expressions
CoffeeScript,if condition expression «else expression»,if condition expression else if condition expression «else expression»,switch expression when condition then expression else expression,All conditions are expressions
CoffeeScript,expression if condition,unless condition expression else unless condition expression «else expression»,switch expression when condition expression «else expression»,All conditions are expressions
CoffeeScript,unless condition expression «else expression»,unless condition expression else unless condition expression «else expression»,switch expression when condition expression «else expression»,All conditions are expressions
CoffeeScript,expression unless condition,unless condition expression else unless condition expression «else expression»,switch expression when condition expression «else expression»,All conditions are expressions
COBOL,IF condition «THEN»  expression  «ELSE  expression». [d],,EVALUATE expression «ALSO expression...»  WHEN case-or-condition «ALSO case-or-condition...»  expression   ...  «WHEN OTHER  expression»  END-EVALUATE,
,if,else if,select case,conditional expression
