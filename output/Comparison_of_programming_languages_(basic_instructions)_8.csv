,while,do while,for i = first to last,foreach
Ada[1],while condition loop statements end loop,loop statementsexit when not condition end loop,for index in «reverse» [first .. last | discrete_type] loop statements end loop,for item of «reverse» iterator loop statements end loop   (for [all | some] [in | of] [first .. last | discrete_type | iterator] => predicate)[b]
ALGOL 68,«for index» «from first» «by increment» «to last» «while condition» do statements od,«for index» «from first» «by increment» «to last» «while condition» do statements od,«for index» «from first» «by increment» «to last» «while condition» do statements od,for key «to upb list» do «typename val=list[key];» statements od
ALGOL 68,"«while condition»
    do statements od","«while statements; condition»
    do statements od",«for index» «from first» «by increment» «to last» do statements od,for key «to upb list» do «typename val=list[key];» statements od
APL,:While conditionstatements :EndWhile,:Repeat statements:Until condition,:For var«s» :In liststatements :EndFor,:For var«s» :InEach liststatements :EndFor
C (C99),"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,for («type» i = first; i <= last; i++) instructions,N/A
Objective-C,"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,for («type» i = first; i <= last; i++) instructions,for (type item in set) instructions
C++ (STL),"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,for («type» i = first; i <= last; i++) instructions,"«std::»for_each(start, end, function)
(C++11) for (type item : set) instructions"
C#,"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,for («type» i = first; i <= last; i++) instructions,foreach (type item in set) instructions
Java,"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,for («type» i = first; i <= last; i++) instructions,for (type item : set) instructions
JavaScript,"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,for (var i = first; i <= last; i++) instructions,for (var item of set) instructions (since EcmaScript 2015[11])
PHP,"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,"foreach (range(first, last) as $i) instructions or  for ($i = first; $i <= last; $i++) instructions",foreach (set as item) instructions  or  foreach (set as key => item) instructions
Windows PowerShell,"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,for ($i = first; $i -le last; $i++) instructions,foreach (item in set) instructions using item
D,"instructions can be a single statement or a block in the form of: { statements }
 
while (condition) instructions",do instructions while (condition);,foreach (i; first ... last) instructions,foreach («type» item; set) instructions
Go,for condition { instructions },,for i := first; i <= last; i++ { instructions },"for key, item := range set { instructions }"
Swift,while condition { instructions },repeat { instructions } while condition (2.x)  do { instructions } while condition (1.x),for i = first ... last { instructions } or  for i = first ..< last+1 { instructions } or  for var i = first; i <= last; i++ { instructions },for item in set { instructions }
Perl,while (condition) { instructions } or  until (notcondition) { instructions },do { instructions } while (condition) or  do { instructions } until (notcondition),for«each» «$i» (first .. last) { instructions } or  for ($i = first; $i <= last; $i++) { instructions },for«each» «$item» (set) { instructions }
Raku,while condition { instructions } or  until notcondition { instructions },repeat { instructions } while condition or  repeat { instructions } until notcondition,for  first..last -> $i  { instructions } or  loop ($i = first; $i <=last; $i++) { instructions },for set« -> $item»  { instructions }
Ruby,while condition instructionsend  or  until notcondition instructions end,begin instructions end while condition  or  begin instructions end until notcondition,for i in first..last instructions end   or  for i in first...last+1 instructions end  or  first.upto(last) { |i| instructions },for item in set instructions end  or  set.each { |item| instructions }
Bash shell,while condition ;doinstructionsdone  or  until notcondition ;doinstructions done,N/A,for ((i = first; i <= last; ++i)) ; doinstructionsdone,for item in set ;doinstructions done
Scala,while (condition) { instructions },do { instructions } while (condition),for (i <- first to last «by 1») { instructions } or first to last «by 1» foreach (i => { instructions }),for (item <- set) { instructions } or set foreach (item => { instructions })
Smalltalk,conditionBlock whileTrue: loopBlock,loopBlock doWhile: conditionBlock,first to: last do: loopBlock,collection do: loopBlock
Common Lisp,(loopwhile conditiondoinstructions) or  (do () (notcondition)instructions),(loopdoinstructionswhile condition),(loopfor i from first to last «by 1»doinstructions) or  (dotimes (i N)instructions) or  (do ((i first (1+ i))) ((>= i last))instructions),(loopfor item in listdoinstructions) or  (loopfor item across vectordoinstructions) or  (dolist (item list)instructions) or (mapc function list) or  (map 'type function sequence)
Scheme,(do () (notcondition) instructions) or  (let loop () (if condition (begin instructions (loop)))),(let loop () (instructions (if condition (loop)))),(do ((i first (+ i 1))) ((>= i last)) instructions) or  (let loop ((i first)) (if (< i last) (begin instructions (loop (+ i 1))))),(for-each (lambda (item) instructions) list)
ISLISP,(while condition instructions),(tagbody loop instructions (if condition (go loop)),(for ((i first (+ i 1))) ((>= i last)) instructions),(mapc (lambda (item) instructions) list)
Pascal,while condition do begin instructions end,repeat instructions until notcondition;,for i := first «step 1» to last do begin instructions end;[a],for item in set do ...
Visual Basic,"Do While condition instructionsLoop  or Do Until notcondition instructionsLoopor
While condition
instructions
Wend (Visual Basic)
End While (Visual Basic .NET)",Do instructions Loop While condition  or Do instructions Loop Until notcondition,"i must be declared beforehand.
For i = first To last« Step 1» instructions Next i ",For Each item In set instructions Next item
Visual Basic .NET,"Do While condition instructionsLoop  or Do Until notcondition instructionsLoopor
While condition
instructions
Wend (Visual Basic)
End While (Visual Basic .NET)",Do instructions Loop While condition  or Do instructions Loop Until notcondition,For i« As type» = first To last« Step 1» instructionsNext« i»[a],For Each item« As type» In set instructions Next« item»
Xojo,While condition instructionsWend,Do Until notcondition instructionsLoop  or Do instructions Loop Until notcondition,For i« As type» = first To last« Step 1» instructionsNext« i»[a],For Each item« As type» In set instructions Next« item»
Python,while condition :  Tab ↹ instructions  «else:  Tab ↹ instructions»,N/A,"for i in range(first, last+1):  Tab ↹ instructions  «else:  Tab ↹ instructions»(Python 3.x) 
for i in xrange(first, last+1):  Tab ↹ instructions  «else:  Tab ↹instructions»(Python 2.x)",for item in set:  Tab ↹ instructions  «else:  Tab ↹ instructions»
S-Lang,while (condition) { instructions } «then optional-block»,do { instructions } while (condition) «then optional-block»,for (i = first; i <= last; i++) { instructions } «then optional-block»,foreach item(set) «using (what)» { instructions } «then optional-block»
Fortran,DO WHILE (condition)  instructions ENDDO,DO  instructions  IF (condition) EXIT  ENDDO,"DO I = first,last  instructions  ENDDO",N/A
Forth,BEGIN « instructions » condition WHILE instructions REPEAT,BEGIN  instructions condition UNTIL,limit start DO instructions LOOP,N/A
OCaml,while condition do instructions done,N/A,for i = first to last do instructions done,Array.iter (fun item -> instructions) array  List.iter (fun item -> instructions) list
F#,while condition do  Tab ↹ instructions,N/A,for i = first to last do  Tab ↹ instructions,for item in set do  Tab ↹ instructions  or  Seq.iter (fun item -> instructions) set
Standard ML,while condition do ( instructions ),N/A,N/A,Array.app (fn item => instructions) array  app (fn item => instructions) list
Haskell (GHC),N/A,N/A,Control.Monad.forM_ [first..last] (\i -> do instructions),Control.Monad.forM_ list (\item -> do instructions)
Eiffel,from setup until condition loop instructions end,from setup until condition loop instructions end,from setup until condition loop instructions end,from setup until condition loop instructions end
CoffeeScript,while condition expression,N/A,for i in [first..last] expression,for item in set expression
CoffeeScript,expression while condition,N/A,for i in [first..last] expression,for item in set expression
CoffeeScript,while condition then expression,N/A,for i in [first..last] expression,for item in set expression
CoffeeScript,until condition expression,N/A,for i in [first..last] expression,for item in set expression
CoffeeScript,expression until condition,N/A,for i in [first..last] then expression,for item in set then expression
CoffeeScript,until condition then expression,N/A,expression for i in [first..last],expression for item in set
COBOL,PERFORM procedure-1 «THROUGH procedure-2» ««WITH» TEST BEFORE» UNTIL condition[c],PERFORM procedure-1 «THROUGH procedure-2» «WITH» TEST AFTER UNTIL condition[c],PERFORM procedure-1 «THROUGH procedure-2» VARYING i FROM first BY increment UNTIL i > last[d],N/A
COBOL,PERFORM ««WITH» TEST BEFORE» UNTIL condition  expression  END-PERFORM,PERFORM «WITH» TEST AFTER UNTIL condition  expression  END-PERFORM,PERFORM VARYING i FROM first BY increment UNTIL i > last  expression  END-PERFORM[d],N/A
