,basic/void method,value-returning method
ABAP Objects,methods name «importing parameter = argument» «exporting parameter = argument» «changing parameter = argument» «returning value(parameter)» method name. instructions endmethod.[28],[29]
APL (Dyalog),∇ «left argument» name «right arguments» instructions ∇,∇ result ← «left argument» name «right arguments» instructions ∇
"C++[30]
type foo(«parameters»);
The implementation of methods is usually provided in a separate source file, with the following syntax

type class::foo(«parameters») { instructions }[31]",void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; }
C#,void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; }
D,void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; }
Java,void foo(«parameters») { instructions },type foo(«parameters») { instructions ... return value; }
eC,void ««type of 'this'»::»foo(«parameters») { instructions },type ««type of this»::»foo(«parameters») { instructions ... return value; }
Eiffel,foo ( «parameters» )  do  instructions  end,foo ( «parameters» ): TYPE  do  instructions...  Result := value  end
Objective-C,- (void)foo«:parameter «bar:parameter ...»» { instructions },- (type)foo«:parameter «bar:parameter ...»» { instructions... return value; }
Swift,func foo(«parameters») { instructions },func foo(«parameters») -> type { instructions... return value }
Python,"def foo(self«, parameters»):  Tab ↹ instructions","def foo(self«, parameters»):  Tab ↹ instructions  Tab ↹ return value"
Visual Basic .NET,Sub Foo(«parameters»)  instructions  End Sub,Function Foo(«parameters») As type  instructions  ...  Return value  End Function
Xojo,Sub Foo(«parameters»)  instructions  End Sub,Function Foo(«parameters») As type  instructions  ...  Return value  End Function
PHP,function foo(«parameters»)«: void» { instructions },function foo(«parameters»)«: type» { instructions ... return value; }
Perl,"sub foo { my ($self«, parameters») = @_; instructions }","sub foo { my ($self«, parameters») = @_; instructions ... return value; }"
Raku,«has »«multi »method foo(««$self:  »parameters») { instructions },«has «type »»«multi »method foo(««$self:  »parameters») { instructions ... return value; }
Ruby,def foo«(parameters)»  instructions  end,def foo«(parameters)»  instructions  expression resulting in return value  end  or  def foo«(parameters)»  instructions  return value  end
Windows PowerShell,Add-Member «-MemberType» ScriptMethod «-Name» foo «-Value» { «param(parameters)» instructions } -InputObject variable,Add-Member «-MemberType» ScriptMethod «-Name» foo «-Value» { «param(parameters)» instructions ... return value } -InputObject variable
OCaml,N/A,method foo «parameters» = expression
F#,N/A,member this.foo(«parameters») = expression
JavaScript,this.method = function(«parameters») {instructions}  name«.prototype.method = function(«parameters») {instructions}[32], this.method = function(«parameters») {instructions... return value;}  name«.prototype.method = function(«parameters») {instructions... return value;}[32]
Javascript (ES6),foo(«parameters») {instructions},foo(«parameters») {instructions... return value;}
COBOL,"METHOD-ID. foo. «DATA DIVISION. LINKAGE SECTION. parameter declarations» PROCEDURE DIVISION« USING parameters».
instructions
END METHOD foo.","METHOD-ID. foo. DATA DIVISION. LINKAGE SECTION. «parameter declarations» result-var declaration PROCEDURE DIVISION« USING parameters» RETURNING result-var.
instructions
END METHOD foo."
Cobra,def foo(parameters) Tab ↹ instructions,def foo(parameters) as type Tab ↹ instructions Tab ↹ return value,
ISLISP,(defgeneric method (arg1 arg2)) (defmethod method ((arg1 <class1> arg2 <class2>) ...),
